'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

document.addEventListener('DOMContentLoaded', function () {
  'use strict';

  (function () {
    // открытие мобильного меню
    var toggleMenu = function () {
      function toggleMenu(btnClass) {
        _classCallCheck(this, toggleMenu);

        this.burger = document.querySelector(btnClass);
        this.init();
      }

      _createClass(toggleMenu, [{
        key: 'init',
        value: function init() {
          this.burger.addEventListener('click', function () {
            this.classList.toggle('burger--is-active');
          });
        }
      }]);

      return toggleMenu;
    }();

    new toggleMenu('.js-menu');
  })();

  var events = data.events;

  (function () {
    // микрошаблонизации для Event
    var contentElement = document.querySelector('.grid');

    if (contentElement) {
      renderTemplate(contentElement, 'event', events);
    }

    function renderTemplate(element, templateID, events) {

      events.forEach(function (event) {
        var template = document.getElementById(templateID).content.cloneNode(true);

        ///Type

        var tempType = template.querySelector('div[data-event-type]');
        if (event.type === 'critical') {
          tempType.classList.add('event--critical');
        }

        // Size
        tempType.classList.add('grid__item--' + event.size);

        //Icon
        var tempIcon = template.querySelector('div[data-event-icon]');
        var icon = 'icon--' + event.icon + (event.type === 'critical' ? '-white' : '');
        tempIcon.classList.add(icon);

        //Title
        var tempTitle = template.querySelector('h2[data-event-title]');
        tempTitle.innerText = event.title;

        // Source
        var tempSource = template.querySelector('div[data-event-source]');
        tempSource.innerText = event.source;

        // Source
        var tempTime = template.querySelector('div[data-event-time]');
        tempTime.innerText = event.time;

        // Content

        if (event.description) {
          var templateContent = document.getElementById('event-content').content.cloneNode(true);

          var templateContentInner = templateContent.querySelector('.event__content-inner');

          // var tempInner = templateContent.querySelector('.event__inner');

          // Description

          var tempDescription = templateContent.querySelector('div[data-event-description]');
          tempDescription.innerText = event.description;

          tempType.appendChild(templateContent);

          if (event.data && event.data.temperature) {
            var templateIndicators = document.getElementById('event-indicators').content.cloneNode(true);

            var tempTemperature = templateIndicators.querySelector('span[data-event-temperature]');

            tempTemperature.innerText = event.data.temperature;

            var tempHumidity = templateIndicators.querySelector('span[data-event-humidity]');
            tempHumidity.innerText = event.data.humidity;

            templateContentInner.appendChild(templateIndicators);
          }

          if (event.data && event.data.albumcover) {
            var tempMusic = document.getElementById('event-music').content.cloneNode(true);

            var tempMusicTracCover = tempMusic.querySelector('img[data-music-track-cover]');
            tempMusicTracCover.setAttribute('src', event.data.albumcover);

            var tempMusicTrackName = tempMusic.querySelector('div[data-music-track-name]');
            tempMusicTrackName.innerText = event.data.track.name + ' - ' + event.data.artist;

            var tempMusicTrackLength = tempMusic.querySelector('div[data-music-track-length]');
            tempMusicTrackLength.innerText = event.data.track.length;

            var tempMusicVolume = tempMusic.querySelector('div[data-music-volume]');
            tempMusicVolume.innerText = event.data.volume;
            templateContentInner.appendChild(tempMusic);
          }

          if (event.data && event.data.buttons) {
            var templateAlert = document.getElementById('event-alert').content.cloneNode(true);
            templateContentInner.appendChild(templateAlert);
          }

          if (event.data && event.data.type === 'graph') {
            var templatePicture = document.getElementById('event-picture').content.cloneNode(true);
            templateContentInner.appendChild(templatePicture);
          }

          if (event.data && event.data.image) {
            var templateCamera = document.getElementById('event-camera').content.cloneNode(true);
            templateContentInner.appendChild(templateCamera);
          }
        }

        element.appendChild(template);
      });
    }
  })();
});

window.onload = function () {};
//# sourceMappingURL=script.min.js.map
